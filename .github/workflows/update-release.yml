name: Automated Release for Single App

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the `main` branch

jobs:
  Update-release:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4  # Checkout the code from the repository
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      # Step 2: Set up the environment using a custom composite action
      - name: Setup environment
        uses: ./.github/actions/setup-composite-action  # Custom action for environment setup

      # Step 3: Verify pnpm is available (debugging step)
      - name: Use pnpm from setup
        run: pnpm --version  # Print the version of pnpm to verify it's installed

      # Step 4: Determine the version type (patch/minor/major) from the PR title
      - name: Determine version type from PR title
        id: determine-version
        run: |
          # Default to 'patch' if not a pull request
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "VERSION_TYPE=patch" >> $GITHUB_ENV
            echo "Defaulting to 'patch' because this is not a pull request."
            exit 0
          fi
      
          # Get the PR title from the event payload
          PR_TITLE=$(jq -r '.pull_request.title' $GITHUB_EVENT_PATH)
          echo "PR Title: $PR_TITLE"
      
          # Determine the version type based on keywords in the PR title
          if [[ "$PR_TITLE" == *"#minor"* ]]; then
            VERSION_TYPE="minor"
          elif [[ "$PR_TITLE" == *"#major"* ]]; then
            VERSION_TYPE="major"
          else
            VERSION_TYPE="patch"  # Default to patch if no keyword is found
          fi
      
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV  # Export the version type as an environment variable
          echo "Version type determined: $VERSION_TYPE"

      # Step 5: Read the current version from package.json
      - name: Read current version
        id: read-version
        run: |
          # Check if the package.json file exists
          if ! [ -f "apps/web/package.json" ]; then
            echo "Error: apps/web/package.json not found. Exiting."
            exit 1
          fi

          # Read the current version from package.json
          CURRENT_VERSION=$(grep '"version":' apps/web/package.json | awk -F'"' '{print $4}')
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Unable to find the current version in apps/web/package.json. Exiting."
            exit 1
          fi
          echo "Current version: $CURRENT_VERSION"

          # Export the current version as an environment variable
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      # Step 6: Create and push a Git tag for the current release
      - name: Create and push tag for current release
        run: |
          TAG_NAME="web-v${{ env.CURRENT_VERSION }}"  # Create the tag name
          git tag $TAG_NAME  # Create the tag
          git push origin $TAG_NAME  # Push the tag to the repository

      # Step 7: Create a GitHub Release for the current release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1  # Use the GitHub Release action
        with:
          tag_name: "web-v${{ env.CURRENT_VERSION }}"  # Tag name for the release
          name: "Release web ${{ env.CURRENT_VERSION }}"  # Name of the release
          body: "Automated release for `web` version `${{ env.CURRENT_VERSION }}`"  # Release description
          draft: false  # Publish the release immediately
          prerelease: false  # Mark as a stable release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token for authentication

      # Step 8: Increment the version for the next release
      - name: Increment version for next release
        run: |
          # Split the current version into MAJOR, MINOR, and PATCH components
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.CURRENT_VERSION }}"
          # Increment the version based on the version type
          case "$VERSION_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))  # Increment MAJOR and reset MINOR and PATCH
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))  # Increment MINOR and reset PATCH
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))  # Increment PATCH
              ;;
            *)
              echo "Error: Invalid VERSION_TYPE. Expected 'major', 'minor', or 'patch'. Exiting."
              exit 1
              ;;
          esac

          # Construct the next version string
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          if [ -z "$NEXT_VERSION" ]; then
            echo "Error: Failed to calculate the new version. Exiting."
            exit 1
          fi
          echo "Next version: $NEXT_VERSION"

          # Export the next version as an environment variable for subsequent steps
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      # Step 9: Create and push a new branch for the next release
      - name: Create and push next release branch
        if: env.NEXT_VERSION != ''  # Only run if NEXT_VERSION is set
        run: |
          NEXT_BRANCH="release/v${{ env.NEXT_VERSION }}"  # Create the branch name
          
          echo "Creating next release branch: $NEXT_BRANCH"
          
          git checkout -b $NEXT_BRANCH  # Create the new branch

          # Update the version in package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.NEXT_VERSION }}\"/" apps/web/package.json

          # Verify the version was updated correctly
          UPDATED_VERSION=$(grep '"version":' apps/web/package.json | awk -F'"' '{print $4}')
          if [ "$UPDATED_VERSION" != "${{ env.NEXT_VERSION }}" ]; then
            echo "Error: Failed to update the version in apps/web/package.json. Exiting."
            exit 1
          fi

          # Update the version in package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.NEXT_VERSION }}\"/" apps/web/package.json

          # Print the updated version for debugging
          echo "Version successfully updated to: $UPDATED_VERSION"

          # Commit and push the updated package.json to the next release branch
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "chore: bump version to ${{ env.NEXT_VERSION }} [skip ci]"
          git push -u origin $NEXT_BRANCH

          
          

          

          
