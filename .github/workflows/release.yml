name: Automated Release for Single App

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-composite-action

      - name: Use pnpm from setup
        run: pnpm --version

      - name: Determine version type from PR title
        if: github.event_name == 'pull_request'
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" == *"#minor"* ]]; then
            VERSION_TYPE="minor"
          elif [[ "$PR_TITLE" == *"#major"* ]]; then
            VERSION_TYPE="major"
          else
            VERSION_TYPE="patch"
          fi
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

      - name: Increment version manually
        run: |
          if ! [ -f "apps/web/package.json" ]; then
            echo "Error: apps/web/package.json not found. Exiting."
            exit 1
          fi

          CURRENT_VERSION=$(grep '"version":' apps/web/package.json | awk -F'"' '{print $4}')
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Unable to find the current version in apps/web/package.json. Exiting."
            exit 1
          fi
          echo "Current version: $CURRENT_VERSION"

          NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. -v OFS=. '{$NF += 1 ; print}')
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: Failed to calculate the new version. Exiting."
            exit 1
          fi
          echo "New version: $NEW_VERSION"

          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" apps/web/package.json

          UPDATED_VERSION=$(grep '"version":' apps/web/package.json | awk -F'"' '{print $4}')
          if [ "$UPDATED_VERSION" != "$NEW_VERSION" ]; then
            echo "Error: Failed to update the version in apps/web/package.json. Exiting."
            exit 1
          fi

          echo "Version successfully updated to: $UPDATED_VERSION"
          echo "NEW_VERSION=$UPDATED_VERSION" >> $GITHUB_ENV

      - name: Debug NEW_VERSION
        run: |
          echo "NEW_VERSION is set to: ${{ env.NEW_VERSION }}"
          echo "Current directory: $(pwd)"

      - name: Create and push next release branch
        if: env.NEW_VERSION != ''
        run: |
          NEXT_VERSION=$(grep '"version":' apps/web/package.json | awk -F'"' '{print $4}')
          NEXT_BRANCH="release/v$NEXT_VERSION"
          echo "Creating next release branch: $NEXT_BRANCH"
          git checkout -b $NEXT_BRANCH
          git push origin $NEXT_BRANCH