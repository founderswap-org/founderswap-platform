name: Automated Release for Single App

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-composite-action

      - name: Use pnpm from setup
        run: pnpm --version
        
      # ðŸ”¹ Determine type of version (patch/minor/major) from PR title
      - name: Determine version type from PR title
        if: github.event_name == 'pull_request'
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" == *"#minor"* ]]; then
            VERSION_TYPE="minor"
          elif [[ "$PR_TITLE" == *"#major"* ]]; then
            VERSION_TYPE="major"
          else
            VERSION_TYPE="patch"
          fi
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          
      - name: Increment version only if needed
        run: |
          # Check if the "version" key exists in package.json
          if ! grep -q '"version":' apps/web/package.json; then
            echo "No version found in package.json. Setting default version to 1.0.0."
            sed -i 's/{/{\n  "version": "1.0.0",/' apps/web/package.json
          fi

          # Get the current version without using jq
          CURRENT_VERSION=$(cat apps/web/package.json | grep '"version":' | awk -F'"' '{print $4}')
          echo "$CURRENT_VERSION"

          # Generate a new version using pnpm and extract only the version number
          RAW_VERSION_OUTPUT=$(pnpm --filter web version $VERSION_TYPE --no-git-tag-version)
          echo $RAW_VERSION_OUTPUT
          
          # If pnpm outputs in the format "web: 1.2.3", extract only the version number
          if echo "$RAW_VERSION_OUTPUT" | grep -q ':'; then
            NEW_VERSION=$(echo "$RAW_VERSION_OUTPUT" | awk '{print $2}')
          else
            NEW_VERSION=$RAW_VERSION_OUTPUT
          fi

          # If the version has not changed, exit
          #if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
          #  echo "No version change needed for web"
          #  exit 0
          #fi

          echo "New version for web: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          # Configure Git and commit the updated package.json
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          git add apps/web/package.json
          git commit -m "chore: bump web to $NEW_VERSION"
      - name: Debug NEW_VERSION
        run: |
          echo "NEW_VERSION is set to: ${{ env.NEW_VERSION }}"
          echo "Current directory: $(pwd)"

      - name: Create and push release branch
        if: env.NEW_VERSION != ''
        run: |
          # Remove prefix "v" from version if exists
          CLEAN_VERSION=$(echo "${{ env.NEW_VERSION }}" | sed 's/^v//')
          RELEASE_BRANCH="release/v$CLEAN_VERSION"

          echo "Creating release branch: $RELEASE_BRANCH"
          git checkout -b $RELEASE_BRANCH
          git push origin $RELEASE_BRANCH

      - name: Create and push tag
        if: env.NEW_VERSION != ''
        run: |
          TAG_NAME="web-v${{ env.NEW_VERSION }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Create GitHub Release
        if: env.NEW_VERSION != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "web-v${{ env.NEW_VERSION }}"
          name: "Release web ${{ env.NEW_VERSION }}"
          body: "Automated release for `web` version `${{ env.NEW_VERSION }}`"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push next release branch
        if: env.NEW_VERSION != ''
        run: |
          NEXT_VERSION=$(pnpm -C apps/web version patch --no-git-tag-version | tail -n 1)
          NEXT_BRANCH="release/v$NEXT_VERSION"
          
          echo "Creating next release branch: $NEXT_BRANCH"
          
          git checkout -b $NEXT_BRANCH
          git push origin $NEXT_BRANCH